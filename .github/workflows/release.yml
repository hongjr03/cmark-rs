name: Release Crate

on:
  push:
    branches: [main, master]
    paths:
      - 'Cargo.toml'

jobs:
  publish:
    name: Publish to Crates.io and Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write 

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable 

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get crate version from Cargo.toml
        id: get_version
        run: |
          # 使用 grep 和 sed 从 Cargo.toml 中提取版本号
          # 确保你的 Cargo.toml 中的 version 格式是 version = "x.y.z"
          VERSION=$(grep '^version *=' Cargo.toml | sed -E 's/version *= *"(.*)"/\1/')
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from Cargo.toml"
            exit 1
          fi
          echo "Crate version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build
        run: cargo build --release --all-features

      - name: Run tests
        run: cargo test --release --all-features

      # 发布到 Crates.io
      # 方式一：使用 CARGO_REGISTRY_TOKEN (传统方式)
      # 你需要在 GitHub secrets 中设置 CRATES_IO_TOKEN
      # - name: Publish to Crates.io (using token)
      #   env:
      #     CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      #   run: cargo publish

      # 方式二：使用 crates.io 的 OIDC 发布 (推荐方式，更安全)
      # 参考: https://blog.rust-lang.org/2023/08/16/crates-io-trusted-publishers.html
      # 你需要在 crates.io 上配置你的 crate，信任 GitHub Actions OIDC 发布者
      # 确保你的 crate 名称和 GitHub 仓库名称/所有者匹配 crates.io 上的设置
      - name: Publish to Crates.io (using OIDC trusted publisher)
        run: cargo publish
        # 注意：使用 OIDC 时，不需要显式设置 CARGO_REGISTRY_TOKEN 环境变量
        # GitHub Actions 会自动处理与 crates.io 的认证

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2 # 使用较新的 v2 版本
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            New release: v${{ steps.get_version.outputs.version }}

            Changes in this release:
            (You can add release notes here, or link to a CHANGELOG.md)
          # 可选: 如果你的构建产物需要上传到 Release
          # files: |
          #   target/release/your_binary_name
          #   target/release/another_artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub Actions 会自动提供这个 token